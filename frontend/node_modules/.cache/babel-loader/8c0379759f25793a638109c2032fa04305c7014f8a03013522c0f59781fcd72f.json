{"ast":null,"code":"var _jsxFileName = \"D:\\\\Sarthak\\\\VScode workshop\\\\Projects\\\\DSA project\\\\traveler-guide\\\\frontend\\\\src\\\\components\\\\Map.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useCallback } from \"react\";\nimport { Box, Button, Flex, HStack, VStack, IconButton, Input, Text, Select, Spinner, useToast } from \"@chakra-ui/react\";\nimport { FaLocationArrow, FaTimes, FaCar, FaTree, FaMoneyBillWave, FaClock } from \"react-icons/fa\";\nimport { GoogleMap, Marker, Autocomplete, DirectionsRenderer, InfoWindow } from \"@react-google-maps/api\";\nimport { routesService, predictionsService } from \"../services/api\";\n\n// Map container style\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst mapContainerStyle = {\n  width: \"100%\",\n  height: \"100%\"\n};\n\n// Default center position (San Francisco)\nconst defaultCenter = {\n  lat: 37.7749,\n  lng: -122.4194\n};\n\n// Map options\nconst mapOptions = {\n  zoomControl: false,\n  streetViewControl: false,\n  mapTypeControl: false,\n  fullscreenControl: false\n};\nconst Map = () => {\n  _s();\n  // References\n  const sourceRef = useRef(null);\n  const destinationRef = useRef(null);\n  const mapRef = useRef(null);\n\n  // State\n  const [map, setMap] = useState(null);\n  const [directionsResponse, setDirectionsResponse] = useState(null);\n  const [distance, setDistance] = useState(\"\");\n  const [duration, setDuration] = useState(\"\");\n  const [predictedDuration, setPredictedDuration] = useState(null);\n  const [routePreferences, setRoutePreferences] = useState({\n    avoidTolls: false,\n    avoidHighways: false,\n    mode: \"driving\"\n  });\n  const [algorithm, setAlgorithm] = useState(\"a-star\");\n  const [isLoading, setIsLoading] = useState(false);\n  const [selectedMarker, setSelectedMarker] = useState(null);\n\n  // Toast for notifications\n  const toast = useToast();\n\n  // Callback when map loads\n  const onMapLoad = useCallback(map => {\n    mapRef.current = map;\n    setMap(map);\n  }, []);\n\n  // Calculate route using Google Directions Service and our backend\n  const calculateRoute = async () => {\n    if (!sourceRef.current.value || !destinationRef.current.value) {\n      toast({\n        title: \"Missing information\",\n        description: \"Please enter both source and destination\",\n        status: \"error\",\n        duration: 3000,\n        isClosable: true\n      });\n      return;\n    }\n    setIsLoading(true);\n    try {\n      // Get the places from autocomplete\n      const sourcePlace = sourceRef.current.value;\n      const destPlace = destinationRef.current.value;\n\n      // First, use Google's DirectionsService to display the route on the map\n      // eslint-disable-next-line no-undef\n      const directionsService = new google.maps.DirectionsService();\n      const googleResults = await directionsService.route({\n        origin: sourcePlace,\n        destination: destPlace,\n        // eslint-disable-next-line no-undef\n        travelMode: google.maps.TravelMode.DRIVING\n      });\n      setDirectionsResponse(googleResults);\n      setDistance(googleResults.routes[0].legs[0].distance.text);\n      setDuration(googleResults.routes[0].legs[0].duration.text);\n\n      // Get the coordinates of source and destination\n      const sourceCoords = {\n        lat: googleResults.routes[0].legs[0].start_location.lat(),\n        lng: googleResults.routes[0].legs[0].start_location.lng()\n      };\n      const destCoords = {\n        lat: googleResults.routes[0].legs[0].end_location.lat(),\n        lng: googleResults.routes[0].legs[0].end_location.lng()\n      };\n\n      // Now, use our backend API for route calculation using selected algorithm\n      const source = {\n        name: sourcePlace,\n        lat: sourceCoords.lat,\n        lng: sourceCoords.lng\n      };\n      const destination = {\n        name: destPlace,\n        lat: destCoords.lat,\n        lng: destCoords.lng\n      };\n\n      // If we have preferences, use the preferences endpoint\n      let routeResponse;\n      if (routePreferences.avoidTolls || routePreferences.avoidHighways) {\n        routeResponse = await routesService.calculateRouteWithPreferences(source, destination, routePreferences);\n      } else {\n        routeResponse = await routesService.calculateRoute(source, destination, algorithm);\n      }\n      console.log(\"Backend route calculation:\", routeResponse.data);\n\n      // Get ML-based travel time prediction\n      const predictionResponse = await predictionsService.predictTravelTime(source, destination, new Date().toISOString(), \"best_guess\");\n      setPredictedDuration(predictionResponse.data.prediction.travelTimeMinutes);\n\n      // Show success message\n      toast({\n        title: \"Route calculated\",\n        description: `Using ${algorithm} algorithm with our ML models`,\n        status: \"success\",\n        duration: 3000,\n        isClosable: true\n      });\n    } catch (error) {\n      console.error(\"Error calculating route:\", error);\n      toast({\n        title: \"Error calculating route\",\n        description: error.message,\n        status: \"error\",\n        duration: 5000,\n        isClosable: true\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Clear route\n  const clearRoute = () => {\n    setDirectionsResponse(null);\n    setDistance(\"\");\n    setDuration(\"\");\n    setPredictedDuration(null);\n    sourceRef.current.value = \"\";\n    destinationRef.current.value = \"\";\n  };\n\n  // Center map on current position\n  const getCurrentLocation = () => {\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(position => {\n        const pos = {\n          lat: position.coords.latitude,\n          lng: position.coords.longitude\n        };\n        if (map) {\n          map.panTo(pos);\n          map.setZoom(14);\n        }\n      }, () => {\n        toast({\n          title: \"Error\",\n          description: \"Unable to get your location\",\n          status: \"error\",\n          duration: 3000,\n          isClosable: true\n        });\n      });\n    } else {\n      toast({\n        title: \"Error\",\n        description: \"Your browser does not support geolocation\",\n        status: \"error\",\n        duration: 3000,\n        isClosable: true\n      });\n    }\n  };\n\n  // Handle preference changes\n  const handlePreferenceChange = e => {\n    const {\n      name,\n      value,\n      checked,\n      type\n    } = e.target;\n    setRoutePreferences(prev => ({\n      ...prev,\n      [name]: type === \"checkbox\" ? checked : value\n    }));\n  };\n  return /*#__PURE__*/_jsxDEV(Flex, {\n    position: \"relative\",\n    flexDirection: \"column\",\n    h: \"100vh\",\n    w: \"100vw\",\n    children: [/*#__PURE__*/_jsxDEV(Box, {\n      position: \"absolute\",\n      left: 0,\n      top: 0,\n      h: \"100%\",\n      w: \"100%\",\n      children: /*#__PURE__*/_jsxDEV(GoogleMap, {\n        mapContainerStyle: mapContainerStyle,\n        center: defaultCenter,\n        zoom: 13,\n        options: mapOptions,\n        onLoad: onMapLoad,\n        children: [directionsResponse && /*#__PURE__*/_jsxDEV(DirectionsRenderer, {\n          directions: directionsResponse\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 257,\n          columnNumber: 13\n        }, this), selectedMarker && /*#__PURE__*/_jsxDEV(InfoWindow, {\n          position: selectedMarker.position,\n          onCloseClick: () => setSelectedMarker(null),\n          children: /*#__PURE__*/_jsxDEV(Box, {\n            p: 2,\n            children: [/*#__PURE__*/_jsxDEV(Text, {\n              fontWeight: \"bold\",\n              children: selectedMarker.name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 266,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Text, {\n              children: selectedMarker.description\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 267,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 265,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 261,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 249,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 248,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      p: 4,\n      borderRadius: \"lg\",\n      bgColor: \"white\",\n      shadow: \"base\",\n      minW: {\n        base: \"90%\",\n        md: \"container.md\"\n      },\n      maxW: {\n        base: \"90%\",\n        md: \"container.md\"\n      },\n      m: 4,\n      alignSelf: \"center\",\n      zIndex: 1,\n      children: /*#__PURE__*/_jsxDEV(VStack, {\n        spacing: 4,\n        align: \"stretch\",\n        children: [/*#__PURE__*/_jsxDEV(HStack, {\n          spacing: 2,\n          children: [/*#__PURE__*/_jsxDEV(Box, {\n            flexGrow: 1,\n            children: /*#__PURE__*/_jsxDEV(Autocomplete, {\n              children: /*#__PURE__*/_jsxDEV(Input, {\n                type: \"text\",\n                placeholder: \"Source\",\n                ref: sourceRef\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 290,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 289,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 288,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Box, {\n            flexGrow: 1,\n            children: /*#__PURE__*/_jsxDEV(Autocomplete, {\n              children: /*#__PURE__*/_jsxDEV(Input, {\n                type: \"text\",\n                placeholder: \"Destination\",\n                ref: destinationRef\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 295,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 294,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 293,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 287,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(HStack, {\n          children: [/*#__PURE__*/_jsxDEV(Button, {\n            colorScheme: \"blue\",\n            type: \"submit\",\n            onClick: calculateRoute,\n            isLoading: isLoading,\n            leftIcon: /*#__PURE__*/_jsxDEV(FaCar, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 310,\n              columnNumber: 25\n            }, this),\n            flexGrow: 1,\n            children: \"Calculate Route\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 305,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(IconButton, {\n            \"aria-label\": \"Clear route\",\n            icon: /*#__PURE__*/_jsxDEV(FaTimes, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 317,\n              columnNumber: 21\n            }, this),\n            onClick: clearRoute\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 315,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(IconButton, {\n            \"aria-label\": \"Center map\",\n            icon: /*#__PURE__*/_jsxDEV(FaLocationArrow, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 322,\n              columnNumber: 21\n            }, this),\n            isRound: true,\n            onClick: getCurrentLocation\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 320,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 304,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(HStack, {\n          spacing: 4,\n          justify: \"space-between\",\n          wrap: \"wrap\",\n          children: [/*#__PURE__*/_jsxDEV(Box, {\n            children: /*#__PURE__*/_jsxDEV(Text, {\n              fontWeight: \"bold\",\n              children: [\"Distance: \", distance]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 330,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 329,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Box, {\n            children: /*#__PURE__*/_jsxDEV(Text, {\n              fontWeight: \"bold\",\n              children: [\"Google Duration: \", duration]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 333,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 332,\n            columnNumber: 13\n          }, this), predictedDuration && /*#__PURE__*/_jsxDEV(Box, {\n            children: /*#__PURE__*/_jsxDEV(Text, {\n              fontWeight: \"bold\",\n              color: \"purple.600\",\n              children: [\"AI Predicted: \", predictedDuration, \" mins\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 337,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 336,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 328,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(HStack, {\n          spacing: 4,\n          justify: \"space-between\",\n          wrap: \"wrap\",\n          children: [/*#__PURE__*/_jsxDEV(Box, {\n            children: /*#__PURE__*/_jsxDEV(Select, {\n              value: algorithm,\n              onChange: e => setAlgorithm(e.target.value),\n              size: \"sm\",\n              width: \"150px\",\n              children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"a-star\",\n                children: \"A* Algorithm\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 352,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"dijkstra\",\n                children: \"Dijkstra\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 353,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 346,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 345,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(HStack, {\n            children: [/*#__PURE__*/_jsxDEV(IconButton, {\n              \"aria-label\": \"Avoid tolls\",\n              icon: /*#__PURE__*/_jsxDEV(FaMoneyBillWave, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 360,\n                columnNumber: 23\n              }, this),\n              colorScheme: routePreferences.avoidTolls ? \"green\" : \"gray\",\n              onClick: () => {\n                setRoutePreferences(prev => ({\n                  ...prev,\n                  avoidTolls: !prev.avoidTolls\n                }));\n              },\n              size: \"sm\",\n              title: \"Avoid Tolls\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 358,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(IconButton, {\n              \"aria-label\": \"Avoid highways\",\n              icon: /*#__PURE__*/_jsxDEV(FaCar, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 373,\n                columnNumber: 23\n              }, this),\n              colorScheme: routePreferences.avoidHighways ? \"green\" : \"gray\",\n              onClick: () => {\n                setRoutePreferences(prev => ({\n                  ...prev,\n                  avoidHighways: !prev.avoidHighways\n                }));\n              },\n              size: \"sm\",\n              title: \"Avoid Highways\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 371,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(IconButton, {\n              \"aria-label\": \"Scenic route\",\n              icon: /*#__PURE__*/_jsxDEV(FaTree, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 386,\n                columnNumber: 23\n              }, this),\n              colorScheme: routePreferences.scenic ? \"green\" : \"gray\",\n              onClick: () => {\n                setRoutePreferences(prev => ({\n                  ...prev,\n                  scenic: !prev.scenic\n                }));\n              },\n              size: \"sm\",\n              title: \"Scenic Route\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 384,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(IconButton, {\n              \"aria-label\": \"Fastest route\",\n              icon: /*#__PURE__*/_jsxDEV(FaClock, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 399,\n                columnNumber: 23\n              }, this),\n              colorScheme: routePreferences.fastestRoute ? \"green\" : \"gray\",\n              onClick: () => {\n                setRoutePreferences(prev => ({\n                  ...prev,\n                  fastestRoute: !prev.fastestRoute,\n                  scenic: false // Turn off scenic when fastest is selected\n                }));\n              },\n              size: \"sm\",\n              title: \"Fastest Route\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 397,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 357,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 344,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 286,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 275,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 246,\n    columnNumber: 5\n  }, this);\n};\n_s(Map, \"0w09ePuPBQ75FMZoDvcjKSXn1SI=\", false, function () {\n  return [useToast];\n});\n_c = Map;\nexport default Map;\nvar _c;\n$RefreshReg$(_c, \"Map\");","map":{"version":3,"names":["React","useState","useRef","useCallback","Box","Button","Flex","HStack","VStack","IconButton","Input","Text","Select","Spinner","useToast","FaLocationArrow","FaTimes","FaCar","FaTree","FaMoneyBillWave","FaClock","GoogleMap","Marker","Autocomplete","DirectionsRenderer","InfoWindow","routesService","predictionsService","jsxDEV","_jsxDEV","mapContainerStyle","width","height","defaultCenter","lat","lng","mapOptions","zoomControl","streetViewControl","mapTypeControl","fullscreenControl","Map","_s","sourceRef","destinationRef","mapRef","map","setMap","directionsResponse","setDirectionsResponse","distance","setDistance","duration","setDuration","predictedDuration","setPredictedDuration","routePreferences","setRoutePreferences","avoidTolls","avoidHighways","mode","algorithm","setAlgorithm","isLoading","setIsLoading","selectedMarker","setSelectedMarker","toast","onMapLoad","current","calculateRoute","value","title","description","status","isClosable","sourcePlace","destPlace","directionsService","google","maps","DirectionsService","googleResults","route","origin","destination","travelMode","TravelMode","DRIVING","routes","legs","text","sourceCoords","start_location","destCoords","end_location","source","name","routeResponse","calculateRouteWithPreferences","console","log","data","predictionResponse","predictTravelTime","Date","toISOString","prediction","travelTimeMinutes","error","message","clearRoute","getCurrentLocation","navigator","geolocation","getCurrentPosition","position","pos","coords","latitude","longitude","panTo","setZoom","handlePreferenceChange","e","checked","type","target","prev","flexDirection","h","w","children","left","top","center","zoom","options","onLoad","directions","fileName","_jsxFileName","lineNumber","columnNumber","onCloseClick","p","fontWeight","borderRadius","bgColor","shadow","minW","base","md","maxW","m","alignSelf","zIndex","spacing","align","flexGrow","placeholder","ref","colorScheme","onClick","leftIcon","icon","isRound","justify","wrap","color","onChange","size","scenic","fastestRoute","_c","$RefreshReg$"],"sources":["D:/Sarthak/VScode workshop/Projects/DSA project/traveler-guide/frontend/src/components/Map.js"],"sourcesContent":["import React, { useState, useRef, useCallback } from \"react\";\r\nimport {\r\n  Box,\r\n  Button,\r\n  Flex,\r\n  HStack,\r\n  VStack,\r\n  IconButton,\r\n  Input,\r\n  Text,\r\n  Select,\r\n  Spinner,\r\n  useToast,\r\n} from \"@chakra-ui/react\";\r\nimport {\r\n  FaLocationArrow,\r\n  FaTimes,\r\n  FaCar,\r\n  FaTree,\r\n  FaMoneyBillWave,\r\n  FaClock,\r\n} from \"react-icons/fa\";\r\nimport {\r\n  GoogleMap,\r\n  Marker,\r\n  Autocomplete,\r\n  DirectionsRenderer,\r\n  InfoWindow,\r\n} from \"@react-google-maps/api\";\r\n\r\nimport { routesService, predictionsService } from \"../services/api\";\r\n\r\n// Map container style\r\nconst mapContainerStyle = {\r\n  width: \"100%\",\r\n  height: \"100%\",\r\n};\r\n\r\n// Default center position (San Francisco)\r\nconst defaultCenter = { lat: 37.7749, lng: -122.4194 };\r\n\r\n// Map options\r\nconst mapOptions = {\r\n  zoomControl: false,\r\n  streetViewControl: false,\r\n  mapTypeControl: false,\r\n  fullscreenControl: false,\r\n};\r\n\r\nconst Map = () => {\r\n  // References\r\n  const sourceRef = useRef(null);\r\n  const destinationRef = useRef(null);\r\n  const mapRef = useRef(null);\r\n\r\n  // State\r\n  const [map, setMap] = useState(null);\r\n  const [directionsResponse, setDirectionsResponse] = useState(null);\r\n  const [distance, setDistance] = useState(\"\");\r\n  const [duration, setDuration] = useState(\"\");\r\n  const [predictedDuration, setPredictedDuration] = useState(null);\r\n  const [routePreferences, setRoutePreferences] = useState({\r\n    avoidTolls: false,\r\n    avoidHighways: false,\r\n    mode: \"driving\",\r\n  });\r\n  const [algorithm, setAlgorithm] = useState(\"a-star\");\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [selectedMarker, setSelectedMarker] = useState(null);\r\n\r\n  // Toast for notifications\r\n  const toast = useToast();\r\n\r\n  // Callback when map loads\r\n  const onMapLoad = useCallback((map) => {\r\n    mapRef.current = map;\r\n    setMap(map);\r\n  }, []);\r\n\r\n  // Calculate route using Google Directions Service and our backend\r\n  const calculateRoute = async () => {\r\n    if (!sourceRef.current.value || !destinationRef.current.value) {\r\n      toast({\r\n        title: \"Missing information\",\r\n        description: \"Please enter both source and destination\",\r\n        status: \"error\",\r\n        duration: 3000,\r\n        isClosable: true,\r\n      });\r\n      return;\r\n    }\r\n\r\n    setIsLoading(true);\r\n\r\n    try {\r\n      // Get the places from autocomplete\r\n      const sourcePlace = sourceRef.current.value;\r\n      const destPlace = destinationRef.current.value;\r\n\r\n      // First, use Google's DirectionsService to display the route on the map\r\n      // eslint-disable-next-line no-undef\r\n      const directionsService = new google.maps.DirectionsService();\r\n      const googleResults = await directionsService.route({\r\n        origin: sourcePlace,\r\n        destination: destPlace,\r\n        // eslint-disable-next-line no-undef\r\n        travelMode: google.maps.TravelMode.DRIVING,\r\n      });\r\n\r\n      setDirectionsResponse(googleResults);\r\n      setDistance(googleResults.routes[0].legs[0].distance.text);\r\n      setDuration(googleResults.routes[0].legs[0].duration.text);\r\n\r\n      // Get the coordinates of source and destination\r\n      const sourceCoords = {\r\n        lat: googleResults.routes[0].legs[0].start_location.lat(),\r\n        lng: googleResults.routes[0].legs[0].start_location.lng(),\r\n      };\r\n\r\n      const destCoords = {\r\n        lat: googleResults.routes[0].legs[0].end_location.lat(),\r\n        lng: googleResults.routes[0].legs[0].end_location.lng(),\r\n      };\r\n\r\n      // Now, use our backend API for route calculation using selected algorithm\r\n      const source = {\r\n        name: sourcePlace,\r\n        lat: sourceCoords.lat,\r\n        lng: sourceCoords.lng,\r\n      };\r\n\r\n      const destination = {\r\n        name: destPlace,\r\n        lat: destCoords.lat,\r\n        lng: destCoords.lng,\r\n      };\r\n\r\n      // If we have preferences, use the preferences endpoint\r\n      let routeResponse;\r\n      if (routePreferences.avoidTolls || routePreferences.avoidHighways) {\r\n        routeResponse = await routesService.calculateRouteWithPreferences(\r\n          source,\r\n          destination,\r\n          routePreferences\r\n        );\r\n      } else {\r\n        routeResponse = await routesService.calculateRoute(\r\n          source,\r\n          destination,\r\n          algorithm\r\n        );\r\n      }\r\n\r\n      console.log(\"Backend route calculation:\", routeResponse.data);\r\n\r\n      // Get ML-based travel time prediction\r\n      const predictionResponse = await predictionsService.predictTravelTime(\r\n        source,\r\n        destination,\r\n        new Date().toISOString(),\r\n        \"best_guess\"\r\n      );\r\n\r\n      setPredictedDuration(\r\n        predictionResponse.data.prediction.travelTimeMinutes\r\n      );\r\n\r\n      // Show success message\r\n      toast({\r\n        title: \"Route calculated\",\r\n        description: `Using ${algorithm} algorithm with our ML models`,\r\n        status: \"success\",\r\n        duration: 3000,\r\n        isClosable: true,\r\n      });\r\n    } catch (error) {\r\n      console.error(\"Error calculating route:\", error);\r\n      toast({\r\n        title: \"Error calculating route\",\r\n        description: error.message,\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n      });\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  // Clear route\r\n  const clearRoute = () => {\r\n    setDirectionsResponse(null);\r\n    setDistance(\"\");\r\n    setDuration(\"\");\r\n    setPredictedDuration(null);\r\n    sourceRef.current.value = \"\";\r\n    destinationRef.current.value = \"\";\r\n  };\r\n\r\n  // Center map on current position\r\n  const getCurrentLocation = () => {\r\n    if (navigator.geolocation) {\r\n      navigator.geolocation.getCurrentPosition(\r\n        (position) => {\r\n          const pos = {\r\n            lat: position.coords.latitude,\r\n            lng: position.coords.longitude,\r\n          };\r\n\r\n          if (map) {\r\n            map.panTo(pos);\r\n            map.setZoom(14);\r\n          }\r\n        },\r\n        () => {\r\n          toast({\r\n            title: \"Error\",\r\n            description: \"Unable to get your location\",\r\n            status: \"error\",\r\n            duration: 3000,\r\n            isClosable: true,\r\n          });\r\n        }\r\n      );\r\n    } else {\r\n      toast({\r\n        title: \"Error\",\r\n        description: \"Your browser does not support geolocation\",\r\n        status: \"error\",\r\n        duration: 3000,\r\n        isClosable: true,\r\n      });\r\n    }\r\n  };\r\n\r\n  // Handle preference changes\r\n  const handlePreferenceChange = (e) => {\r\n    const { name, value, checked, type } = e.target;\r\n    setRoutePreferences((prev) => ({\r\n      ...prev,\r\n      [name]: type === \"checkbox\" ? checked : value,\r\n    }));\r\n  };\r\n\r\n  return (\r\n    <Flex position=\"relative\" flexDirection=\"column\" h=\"100vh\" w=\"100vw\">\r\n      {/* Google Map Box */}\r\n      <Box position=\"absolute\" left={0} top={0} h=\"100%\" w=\"100%\">\r\n        <GoogleMap\r\n          mapContainerStyle={mapContainerStyle}\r\n          center={defaultCenter}\r\n          zoom={13}\r\n          options={mapOptions}\r\n          onLoad={onMapLoad}\r\n        >\r\n          {directionsResponse && (\r\n            <DirectionsRenderer directions={directionsResponse} />\r\n          )}\r\n\r\n          {selectedMarker && (\r\n            <InfoWindow\r\n              position={selectedMarker.position}\r\n              onCloseClick={() => setSelectedMarker(null)}\r\n            >\r\n              <Box p={2}>\r\n                <Text fontWeight=\"bold\">{selectedMarker.name}</Text>\r\n                <Text>{selectedMarker.description}</Text>\r\n              </Box>\r\n            </InfoWindow>\r\n          )}\r\n        </GoogleMap>\r\n      </Box>\r\n\r\n      {/* Control panel */}\r\n      <Box\r\n        p={4}\r\n        borderRadius=\"lg\"\r\n        bgColor=\"white\"\r\n        shadow=\"base\"\r\n        minW={{ base: \"90%\", md: \"container.md\" }}\r\n        maxW={{ base: \"90%\", md: \"container.md\" }}\r\n        m={4}\r\n        alignSelf=\"center\"\r\n        zIndex={1}\r\n      >\r\n        <VStack spacing={4} align=\"stretch\">\r\n          <HStack spacing={2}>\r\n            <Box flexGrow={1}>\r\n              <Autocomplete>\r\n                <Input type=\"text\" placeholder=\"Source\" ref={sourceRef} />\r\n              </Autocomplete>\r\n            </Box>\r\n            <Box flexGrow={1}>\r\n              <Autocomplete>\r\n                <Input\r\n                  type=\"text\"\r\n                  placeholder=\"Destination\"\r\n                  ref={destinationRef}\r\n                />\r\n              </Autocomplete>\r\n            </Box>\r\n          </HStack>\r\n\r\n          <HStack>\r\n            <Button\r\n              colorScheme=\"blue\"\r\n              type=\"submit\"\r\n              onClick={calculateRoute}\r\n              isLoading={isLoading}\r\n              leftIcon={<FaCar />}\r\n              flexGrow={1}\r\n            >\r\n              Calculate Route\r\n            </Button>\r\n            <IconButton\r\n              aria-label=\"Clear route\"\r\n              icon={<FaTimes />}\r\n              onClick={clearRoute}\r\n            />\r\n            <IconButton\r\n              aria-label=\"Center map\"\r\n              icon={<FaLocationArrow />}\r\n              isRound\r\n              onClick={getCurrentLocation}\r\n            />\r\n          </HStack>\r\n\r\n          <HStack spacing={4} justify=\"space-between\" wrap=\"wrap\">\r\n            <Box>\r\n              <Text fontWeight=\"bold\">Distance: {distance}</Text>\r\n            </Box>\r\n            <Box>\r\n              <Text fontWeight=\"bold\">Google Duration: {duration}</Text>\r\n            </Box>\r\n            {predictedDuration && (\r\n              <Box>\r\n                <Text fontWeight=\"bold\" color=\"purple.600\">\r\n                  AI Predicted: {predictedDuration} mins\r\n                </Text>\r\n              </Box>\r\n            )}\r\n          </HStack>\r\n\r\n          <HStack spacing={4} justify=\"space-between\" wrap=\"wrap\">\r\n            <Box>\r\n              <Select\r\n                value={algorithm}\r\n                onChange={(e) => setAlgorithm(e.target.value)}\r\n                size=\"sm\"\r\n                width=\"150px\"\r\n              >\r\n                <option value=\"a-star\">A* Algorithm</option>\r\n                <option value=\"dijkstra\">Dijkstra</option>\r\n              </Select>\r\n            </Box>\r\n\r\n            <HStack>\r\n              <IconButton\r\n                aria-label=\"Avoid tolls\"\r\n                icon={<FaMoneyBillWave />}\r\n                colorScheme={routePreferences.avoidTolls ? \"green\" : \"gray\"}\r\n                onClick={() => {\r\n                  setRoutePreferences((prev) => ({\r\n                    ...prev,\r\n                    avoidTolls: !prev.avoidTolls,\r\n                  }));\r\n                }}\r\n                size=\"sm\"\r\n                title=\"Avoid Tolls\"\r\n              />\r\n              <IconButton\r\n                aria-label=\"Avoid highways\"\r\n                icon={<FaCar />}\r\n                colorScheme={routePreferences.avoidHighways ? \"green\" : \"gray\"}\r\n                onClick={() => {\r\n                  setRoutePreferences((prev) => ({\r\n                    ...prev,\r\n                    avoidHighways: !prev.avoidHighways,\r\n                  }));\r\n                }}\r\n                size=\"sm\"\r\n                title=\"Avoid Highways\"\r\n              />\r\n              <IconButton\r\n                aria-label=\"Scenic route\"\r\n                icon={<FaTree />}\r\n                colorScheme={routePreferences.scenic ? \"green\" : \"gray\"}\r\n                onClick={() => {\r\n                  setRoutePreferences((prev) => ({\r\n                    ...prev,\r\n                    scenic: !prev.scenic,\r\n                  }));\r\n                }}\r\n                size=\"sm\"\r\n                title=\"Scenic Route\"\r\n              />\r\n              <IconButton\r\n                aria-label=\"Fastest route\"\r\n                icon={<FaClock />}\r\n                colorScheme={routePreferences.fastestRoute ? \"green\" : \"gray\"}\r\n                onClick={() => {\r\n                  setRoutePreferences((prev) => ({\r\n                    ...prev,\r\n                    fastestRoute: !prev.fastestRoute,\r\n                    scenic: false, // Turn off scenic when fastest is selected\r\n                  }));\r\n                }}\r\n                size=\"sm\"\r\n                title=\"Fastest Route\"\r\n              />\r\n            </HStack>\r\n          </HStack>\r\n        </VStack>\r\n      </Box>\r\n    </Flex>\r\n  );\r\n};\r\n\r\nexport default Map;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}