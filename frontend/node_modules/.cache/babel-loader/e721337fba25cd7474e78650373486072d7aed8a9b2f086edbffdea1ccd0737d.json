{"ast":null,"code":"import axios from\"axios\";const API_URL=process.env.REACT_APP_API_URL||\"http://localhost:5000/api\";// Create axios instance with base URL\nconst apiClient=axios.create({baseURL:API_URL,headers:{\"Content-Type\":\"application/json\"}});// Routes API service\nexport const routesService={// Calculate optimal route\ncalculateRoute:function(source,destination){let algorithm=arguments.length>2&&arguments[2]!==undefined?arguments[2]:\"a-star\";return apiClient.post(\"/routes/calculate\",{source,destination,algorithm});},// Calculate route with preferences\ncalculateRouteWithPreferences:(source,destination,preferences)=>{return apiClient.post(\"/routes/preferences\",{source,destination,preferences});},// Get offline route data\ngetOfflineRoute:routeId=>{return apiClient.get(`/routes/offline/${routeId}`);},// Save route for offline access\nsaveRouteForOffline:routeData=>{return apiClient.post(\"/routes/save\",routeData);}};// Recommendations API service\nexport const recommendationsService={// Get recommendations based on category\ngetRecommendations:(location,category,radius,route)=>{// Map the categories to API endpoints\nconst categoryEndpoints={hotels:\"hotels\",restaurants:\"restaurants\",gasStations:\"gas-stations\",shops:\"places\"};const endpoint=categoryEndpoints[category]||\"places\";// Different parameters based on category\nlet params={lat:location.lat,lng:location.lng,radius:radius*1000// Convert km to meters\n};// For gas stations along a route\nif(category===\"gasStations\"&&route){params={route:JSON.stringify(route),maxDetour:2000// 2km max detour\n};}// For general places (shops, etc)\nif(category===\"shops\"){params.type=\"store\";}return apiClient.get(`/recommendations/${endpoint}`,{params});},// Get place recommendations\ngetPlaceRecommendations:(lat,lng,radius,type)=>{return apiClient.get(\"/recommendations/places\",{params:{lat,lng,radius,type}});},// Get hotel recommendations\ngetHotelRecommendations:(lat,lng,radius,priceLevel)=>{return apiClient.get(\"/recommendations/hotels\",{params:{lat,lng,radius,priceLevel}});},// Get restaurant recommendations\ngetRestaurantRecommendations:(lat,lng,radius,cuisine)=>{return apiClient.get(\"/recommendations/restaurants\",{params:{lat,lng,radius,cuisine}});},// Get gas station recommendations\ngetGasStationRecommendations:(route,maxDetour)=>{return apiClient.get(\"/recommendations/gas-stations\",{params:{route:JSON.stringify(route),maxDetour}});}};// Predictions API service\nexport const predictionsService={// Predict travel time\npredictTravelTime:(source,destination,departureTime,traffic)=>{return apiClient.post(\"/predictions/travel-time\",{source,destination,departureTime,traffic});},// Predict traffic conditions\npredictTraffic:(route,time)=>{return apiClient.post(\"/predictions/traffic\",{route,time});},// Get historical travel data\ngetHistoricalData:(source,destination,limit)=>{return apiClient.get(\"/predictions/historical-data\",{params:{source,destination,limit}});}};export default{routesService,recommendationsService,predictionsService};","map":{"version":3,"names":["axios","API_URL","process","env","REACT_APP_API_URL","apiClient","create","baseURL","headers","routesService","calculateRoute","source","destination","algorithm","arguments","length","undefined","post","calculateRouteWithPreferences","preferences","getOfflineRoute","routeId","get","saveRouteForOffline","routeData","recommendationsService","getRecommendations","location","category","radius","route","categoryEndpoints","hotels","restaurants","gasStations","shops","endpoint","params","lat","lng","JSON","stringify","maxDetour","type","getPlaceRecommendations","getHotelRecommendations","priceLevel","getRestaurantRecommendations","cuisine","getGasStationRecommendations","predictionsService","predictTravelTime","departureTime","traffic","predictTraffic","time","getHistoricalData","limit"],"sources":["D:/Sarthak/VScode workshop/Projects/DSA project/traveler-guide/frontend/src/services/api.js"],"sourcesContent":["import axios from \"axios\";\r\n\r\nconst API_URL = process.env.REACT_APP_API_URL || \"http://localhost:5000/api\";\r\n\r\n// Create axios instance with base URL\r\nconst apiClient = axios.create({\r\n  baseURL: API_URL,\r\n  headers: {\r\n    \"Content-Type\": \"application/json\",\r\n  },\r\n});\r\n\r\n// Routes API service\r\nexport const routesService = {\r\n  // Calculate optimal route\r\n  calculateRoute: (source, destination, algorithm = \"a-star\") => {\r\n    return apiClient.post(\"/routes/calculate\", {\r\n      source,\r\n      destination,\r\n      algorithm,\r\n    });\r\n  },\r\n\r\n  // Calculate route with preferences\r\n  calculateRouteWithPreferences: (source, destination, preferences) => {\r\n    return apiClient.post(\"/routes/preferences\", {\r\n      source,\r\n      destination,\r\n      preferences,\r\n    });\r\n  },\r\n\r\n  // Get offline route data\r\n  getOfflineRoute: (routeId) => {\r\n    return apiClient.get(`/routes/offline/${routeId}`);\r\n  },\r\n\r\n  // Save route for offline access\r\n  saveRouteForOffline: (routeData) => {\r\n    return apiClient.post(\"/routes/save\", routeData);\r\n  },\r\n};\r\n\r\n// Recommendations API service\r\nexport const recommendationsService = {\r\n  // Get recommendations based on category\r\n  getRecommendations: (location, category, radius, route) => {\r\n    // Map the categories to API endpoints\r\n    const categoryEndpoints = {\r\n      hotels: \"hotels\",\r\n      restaurants: \"restaurants\",\r\n      gasStations: \"gas-stations\",\r\n      shops: \"places\",\r\n    };\r\n\r\n    const endpoint = categoryEndpoints[category] || \"places\";\r\n\r\n    // Different parameters based on category\r\n    let params = {\r\n      lat: location.lat,\r\n      lng: location.lng,\r\n      radius: radius * 1000, // Convert km to meters\r\n    };\r\n\r\n    // For gas stations along a route\r\n    if (category === \"gasStations\" && route) {\r\n      params = {\r\n        route: JSON.stringify(route),\r\n        maxDetour: 2000, // 2km max detour\r\n      };\r\n    }\r\n\r\n    // For general places (shops, etc)\r\n    if (category === \"shops\") {\r\n      params.type = \"store\";\r\n    }\r\n\r\n    return apiClient.get(`/recommendations/${endpoint}`, { params });\r\n  },\r\n\r\n  // Get place recommendations\r\n  getPlaceRecommendations: (lat, lng, radius, type) => {\r\n    return apiClient.get(\"/recommendations/places\", {\r\n      params: { lat, lng, radius, type },\r\n    });\r\n  },\r\n\r\n  // Get hotel recommendations\r\n  getHotelRecommendations: (lat, lng, radius, priceLevel) => {\r\n    return apiClient.get(\"/recommendations/hotels\", {\r\n      params: { lat, lng, radius, priceLevel },\r\n    });\r\n  },\r\n\r\n  // Get restaurant recommendations\r\n  getRestaurantRecommendations: (lat, lng, radius, cuisine) => {\r\n    return apiClient.get(\"/recommendations/restaurants\", {\r\n      params: { lat, lng, radius, cuisine },\r\n    });\r\n  },\r\n\r\n  // Get gas station recommendations\r\n  getGasStationRecommendations: (route, maxDetour) => {\r\n    return apiClient.get(\"/recommendations/gas-stations\", {\r\n      params: { route: JSON.stringify(route), maxDetour },\r\n    });\r\n  },\r\n};\r\n\r\n// Predictions API service\r\nexport const predictionsService = {\r\n  // Predict travel time\r\n  predictTravelTime: (source, destination, departureTime, traffic) => {\r\n    return apiClient.post(\"/predictions/travel-time\", {\r\n      source,\r\n      destination,\r\n      departureTime,\r\n      traffic,\r\n    });\r\n  },\r\n\r\n  // Predict traffic conditions\r\n  predictTraffic: (route, time) => {\r\n    return apiClient.post(\"/predictions/traffic\", { route, time });\r\n  },\r\n\r\n  // Get historical travel data\r\n  getHistoricalData: (source, destination, limit) => {\r\n    return apiClient.get(\"/predictions/historical-data\", {\r\n      params: { source, destination, limit },\r\n    });\r\n  },\r\n};\r\n\r\nexport default { routesService, recommendationsService, predictionsService };\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}