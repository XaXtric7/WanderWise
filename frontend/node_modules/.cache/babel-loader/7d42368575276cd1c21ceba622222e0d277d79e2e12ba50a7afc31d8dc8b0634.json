{"ast":null,"code":"var _jsxFileName = \"D:\\\\Sarthak\\\\VScode workshop\\\\Projects\\\\DSA project\\\\traveler-guide\\\\frontend\\\\src\\\\components\\\\Predictions.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { Box, Button, Heading, Flex, VStack, HStack, Select, Text, Stat, StatLabel, StatNumber, StatGroup, StatHelpText, Divider, FormControl, FormLabel, useToast, Progress } from \"@chakra-ui/react\";\nimport { FaClock, FaChartLine, FaRegCalendarAlt } from \"react-icons/fa\";\nimport { predictionsService } from \"../services/api\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst TrafficLevels = {\n  light: {\n    color: \"green.400\",\n    text: \"Light Traffic\"\n  },\n  moderate: {\n    color: \"yellow.400\",\n    text: \"Moderate Traffic\"\n  },\n  heavy: {\n    color: \"red.400\",\n    text: \"Heavy Traffic\"\n  }\n};\nconst Predictions = ({\n  source,\n  destination,\n  onPredictionComplete\n}) => {\n  _s();\n  var _TrafficLevels$traffi, _TrafficLevels$traffi2;\n  // State\n  const [predictionType, setPredictionType] = useState(\"travel-time\");\n  const [trafficModel, setTrafficModel] = useState(\"best_guess\");\n  const [departureTime, setDepartureTime] = useState(\"now\");\n  const [customDate, setCustomDate] = useState(new Date().toISOString().split(\"T\")[0]);\n  const [customTime, setCustomTime] = useState(\"08:00\");\n  const [isLoading, setIsLoading] = useState(false);\n  const [prediction, setPrediction] = useState(null);\n  const [trafficPrediction, setTrafficPrediction] = useState(null);\n  const [historicalData, setHistoricalData] = useState(null);\n\n  // Toast for notifications\n  const toast = useToast();\n\n  // Make prediction\n  const makePrediction = async () => {\n    if (!source || !destination) {\n      toast({\n        title: \"Missing Information\",\n        description: \"Please calculate a route first to get source and destination locations\",\n        status: \"warning\",\n        duration: 3000,\n        isClosable: true\n      });\n      return;\n    }\n    setIsLoading(true);\n    try {\n      // Get departure date/time\n      let departureTimeValue;\n      if (departureTime === \"now\") {\n        departureTimeValue = new Date().toISOString();\n      } else if (departureTime === \"custom\") {\n        const dateTimeStr = `${customDate}T${customTime}:00`;\n        departureTimeValue = new Date(dateTimeStr).toISOString();\n      }\n      if (predictionType === \"travel-time\") {\n        // Predict travel time\n        const response = await predictionsService.predictTravelTime(source, destination, departureTimeValue, trafficModel);\n        setPrediction(response.data.prediction);\n        setTrafficPrediction(null);\n        setHistoricalData(null);\n\n        // Notify parent component about the prediction\n        if (onPredictionComplete) {\n          onPredictionComplete(response.data.prediction);\n        }\n      } else if (predictionType === \"traffic\") {\n        // Predict traffic\n        const response = await predictionsService.predictTraffic([source, destination], departureTimeValue);\n        setTrafficPrediction(response.data.prediction);\n        setPrediction(null);\n        setHistoricalData(null);\n      } else if (predictionType === \"historical\") {\n        // Get historical data\n        const response = await predictionsService.getHistoricalData(JSON.stringify(source), JSON.stringify(destination), 10 // limit to 10 entries\n        );\n        setHistoricalData(response.data.data);\n        setPrediction(null);\n        setTrafficPrediction(null);\n      }\n      toast({\n        title: \"Prediction Complete\",\n        description: \"AI model has generated the prediction based on historical data\",\n        status: \"success\",\n        duration: 3000,\n        isClosable: true\n      });\n    } catch (error) {\n      console.error(\"Error making prediction:\", error);\n      toast({\n        title: \"Error making prediction\",\n        description: error.message,\n        status: \"error\",\n        duration: 5000,\n        isClosable: true\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Format duration in human-readable form\n  const formatDuration = minutes => {\n    const hours = Math.floor(minutes / 60);\n    const mins = Math.round(minutes % 60);\n    if (hours === 0) {\n      return `${mins} minutes`;\n    } else if (mins === 0) {\n      return `${hours} hour${hours > 1 ? \"s\" : \"\"}`;\n    } else {\n      return `${hours} hour${hours > 1 ? \"s\" : \"\"} ${mins} min`;\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(Box, {\n    p: 4,\n    children: [/*#__PURE__*/_jsxDEV(Heading, {\n      size: \"lg\",\n      mb: 4,\n      children: \"Travel Time & Traffic Predictions\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(VStack, {\n      spacing: 4,\n      align: \"stretch\",\n      children: [/*#__PURE__*/_jsxDEV(HStack, {\n        spacing: 2,\n        wrap: \"wrap\",\n        children: [/*#__PURE__*/_jsxDEV(FormControl, {\n          w: {\n            base: \"100%\",\n            md: \"200px\"\n          },\n          children: [/*#__PURE__*/_jsxDEV(FormLabel, {\n            fontSize: \"sm\",\n            children: \"Prediction Type\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 160,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Select, {\n            value: predictionType,\n            onChange: e => setPredictionType(e.target.value),\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"travel-time\",\n              children: \"Travel Time\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 165,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"traffic\",\n              children: \"Traffic Conditions\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 166,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"historical\",\n              children: \"Historical Data\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 167,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 161,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 159,\n          columnNumber: 11\n        }, this), predictionType === \"travel-time\" && /*#__PURE__*/_jsxDEV(FormControl, {\n          w: {\n            base: \"100%\",\n            md: \"200px\"\n          },\n          children: [/*#__PURE__*/_jsxDEV(FormLabel, {\n            fontSize: \"sm\",\n            children: \"Traffic Model\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 173,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Select, {\n            value: trafficModel,\n            onChange: e => setTrafficModel(e.target.value),\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"best_guess\",\n              children: \"Best Guess\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 178,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"optimistic\",\n              children: \"Optimistic\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 179,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"pessimistic\",\n              children: \"Pessimistic\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 180,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 174,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 172,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(FormControl, {\n          w: {\n            base: \"100%\",\n            md: \"200px\"\n          },\n          children: [/*#__PURE__*/_jsxDEV(FormLabel, {\n            fontSize: \"sm\",\n            children: \"Departure Time\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 186,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Select, {\n            value: departureTime,\n            onChange: e => setDepartureTime(e.target.value),\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"now\",\n              children: \"Now\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 191,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"custom\",\n              children: \"Custom Date/Time\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 192,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 187,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 185,\n          columnNumber: 11\n        }, this), departureTime === \"custom\" && /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(FormControl, {\n            w: {\n              base: \"100%\",\n              md: \"200px\"\n            },\n            children: [/*#__PURE__*/_jsxDEV(FormLabel, {\n              fontSize: \"sm\",\n              children: \"Date\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 199,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"date\",\n              value: customDate,\n              onChange: e => setCustomDate(e.target.value),\n              className: \"chakra-input\",\n              style: {\n                width: \"100%\",\n                padding: \"0.5rem\",\n                borderRadius: \"0.375rem\",\n                borderWidth: \"1px\",\n                borderColor: \"inherit\"\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 200,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 198,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(FormControl, {\n            w: {\n              base: \"100%\",\n              md: \"150px\"\n            },\n            children: [/*#__PURE__*/_jsxDEV(FormLabel, {\n              fontSize: \"sm\",\n              children: \"Time\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 216,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"time\",\n              value: customTime,\n              onChange: e => setCustomTime(e.target.value),\n              className: \"chakra-input\",\n              style: {\n                width: \"100%\",\n                padding: \"0.5rem\",\n                borderRadius: \"0.375rem\",\n                borderWidth: \"1px\",\n                borderColor: \"inherit\"\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 217,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 215,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true), /*#__PURE__*/_jsxDEV(Box, {\n          alignSelf: {\n            base: \"flex-start\",\n            md: \"flex-end\"\n          },\n          pt: {\n            base: 0,\n            md: 2\n          },\n          w: {\n            base: \"100%\",\n            md: \"auto\"\n          },\n          children: /*#__PURE__*/_jsxDEV(Button, {\n            colorScheme: \"purple\",\n            leftIcon: /*#__PURE__*/_jsxDEV(FaChartLine, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 241,\n              columnNumber: 25\n            }, this),\n            onClick: makePrediction,\n            isLoading: isLoading,\n            w: {\n              base: \"100%\",\n              md: \"auto\"\n            },\n            mt: {\n              base: 2,\n              md: 0\n            },\n            children: \"Predict\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 239,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 234,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Divider, {\n        my: 4\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 252,\n        columnNumber: 9\n      }, this), isLoading && /*#__PURE__*/_jsxDEV(Box, {\n        py: 8,\n        children: [/*#__PURE__*/_jsxDEV(Text, {\n          mb: 2,\n          textAlign: \"center\",\n          children: \"Processing your prediction...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 256,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Progress, {\n          size: \"sm\",\n          isIndeterminate: true,\n          colorScheme: \"purple\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 259,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 255,\n        columnNumber: 11\n      }, this), prediction && /*#__PURE__*/_jsxDEV(Box, {\n        p: 5,\n        borderWidth: \"1px\",\n        borderRadius: \"lg\",\n        bg: \"white\",\n        shadow: \"md\",\n        children: [/*#__PURE__*/_jsxDEV(Heading, {\n          size: \"md\",\n          mb: 4,\n          color: \"purple.600\",\n          children: /*#__PURE__*/_jsxDEV(Flex, {\n            align: \"center\",\n            children: [/*#__PURE__*/_jsxDEV(Box, {\n              as: FaClock,\n              mr: 2\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 268,\n              columnNumber: 17\n            }, this), \"Travel Time Prediction\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 267,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 266,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(StatGroup, {\n          children: [/*#__PURE__*/_jsxDEV(Stat, {\n            children: [/*#__PURE__*/_jsxDEV(StatLabel, {\n              children: \"Predicted Travel Time\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 275,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(StatNumber, {\n              children: formatDuration(prediction.travelTimeMinutes)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 276,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(StatHelpText, {\n              children: trafficModel === \"best_guess\" ? \"Average estimate\" : trafficModel === \"optimistic\" ? \"Best case scenario\" : \"Worst case scenario\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 279,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 274,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Stat, {\n            children: [/*#__PURE__*/_jsxDEV(StatLabel, {\n              children: \"Distance\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 289,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(StatNumber, {\n              children: [(prediction.distance / 1000).toFixed(1), \" km\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 290,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(StatHelpText, {\n              children: \"Total journey distance\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 293,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 288,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Stat, {\n            children: [/*#__PURE__*/_jsxDEV(StatLabel, {\n              children: \"Confidence\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 297,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(StatNumber, {\n              children: [(prediction.confidence * 100).toFixed(0), \"%\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 298,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(StatHelpText, {\n              children: \"ML model confidence\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 301,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 296,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 273,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Box, {\n          mt: 4,\n          children: [/*#__PURE__*/_jsxDEV(Text, {\n            fontWeight: \"bold\",\n            children: \"Departure: \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 306,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Text, {\n            children: new Date(prediction.departureTime).toLocaleString()\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 307,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Text, {\n            fontWeight: \"bold\",\n            mt: 2,\n            children: [\"Estimated Arrival:\", \" \"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 309,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Text, {\n            children: new Date(new Date(prediction.departureTime).getTime() + prediction.travelTimeMinutes * 60 * 1000).toLocaleString()\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 312,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 305,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 265,\n        columnNumber: 11\n      }, this), trafficPrediction && /*#__PURE__*/_jsxDEV(Box, {\n        p: 5,\n        borderWidth: \"1px\",\n        borderRadius: \"lg\",\n        bg: \"white\",\n        shadow: \"md\",\n        children: [/*#__PURE__*/_jsxDEV(Heading, {\n          size: \"md\",\n          mb: 4,\n          color: \"blue.600\",\n          children: /*#__PURE__*/_jsxDEV(Flex, {\n            align: \"center\",\n            children: [/*#__PURE__*/_jsxDEV(Box, {\n              as: FaChartLine,\n              mr: 2\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 327,\n              columnNumber: 17\n            }, this), \"Traffic Prediction\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 326,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 325,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(StatGroup, {\n          children: [/*#__PURE__*/_jsxDEV(Stat, {\n            children: [/*#__PURE__*/_jsxDEV(StatLabel, {\n              children: \"Congestion Level\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 334,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(StatNumber, {\n              color: ((_TrafficLevels$traffi = TrafficLevels[trafficPrediction.congestionLevel]) === null || _TrafficLevels$traffi === void 0 ? void 0 : _TrafficLevels$traffi.color) || \"gray.500\",\n              children: ((_TrafficLevels$traffi2 = TrafficLevels[trafficPrediction.congestionLevel]) === null || _TrafficLevels$traffi2 === void 0 ? void 0 : _TrafficLevels$traffi2.text) || \"Unknown\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 335,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(StatHelpText, {\n              children: \"Overall traffic level\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 344,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 333,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Stat, {\n            children: [/*#__PURE__*/_jsxDEV(StatLabel, {\n              children: \"Average Speed\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 348,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(StatNumber, {\n              children: [trafficPrediction.averageSpeed, \" km/h\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 349,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(StatHelpText, {\n              children: \"Expected average speed\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 350,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 347,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Stat, {\n            children: [/*#__PURE__*/_jsxDEV(StatLabel, {\n              children: \"Delay Probability\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 354,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(StatNumber, {\n              children: [(trafficPrediction.delayProbability * 100).toFixed(0), \"%\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 355,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(StatHelpText, {\n              children: \"Chance of significant delays\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 358,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 353,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 332,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Heading, {\n          size: \"sm\",\n          mt: 4,\n          mb: 2,\n          children: \"Route Segments\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 362,\n          columnNumber: 13\n        }, this), trafficPrediction.segments.map((segment, index) => {\n          var _TrafficLevels$segmen, _TrafficLevels$segmen2, _TrafficLevels$segmen3;\n          return /*#__PURE__*/_jsxDEV(Box, {\n            p: 3,\n            mb: 2,\n            borderWidth: \"1px\",\n            borderRadius: \"md\",\n            borderLeftWidth: \"4px\",\n            borderLeftColor: ((_TrafficLevels$segmen = TrafficLevels[segment.congestion]) === null || _TrafficLevels$segmen === void 0 ? void 0 : _TrafficLevels$segmen.color) || \"gray.200\",\n            children: [/*#__PURE__*/_jsxDEV(Text, {\n              fontWeight: \"bold\",\n              children: [\"Segment \", index + 1]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 378,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Text, {\n              fontSize: \"sm\",\n              children: [\"Traffic:\", \" \", /*#__PURE__*/_jsxDEV(Box, {\n                as: \"span\",\n                color: ((_TrafficLevels$segmen2 = TrafficLevels[segment.congestion]) === null || _TrafficLevels$segmen2 === void 0 ? void 0 : _TrafficLevels$segmen2.color) || \"gray.500\",\n                children: ((_TrafficLevels$segmen3 = TrafficLevels[segment.congestion]) === null || _TrafficLevels$segmen3 === void 0 ? void 0 : _TrafficLevels$segmen3.text) || \"Unknown\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 381,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 379,\n              columnNumber: 17\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 367,\n            columnNumber: 15\n          }, this);\n        })]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 324,\n        columnNumber: 11\n      }, this), historicalData && historicalData.length > 0 && /*#__PURE__*/_jsxDEV(Box, {\n        p: 5,\n        borderWidth: \"1px\",\n        borderRadius: \"lg\",\n        bg: \"white\",\n        shadow: \"md\",\n        children: [/*#__PURE__*/_jsxDEV(Heading, {\n          size: \"md\",\n          mb: 4,\n          color: \"teal.600\",\n          children: /*#__PURE__*/_jsxDEV(Flex, {\n            align: \"center\",\n            children: [/*#__PURE__*/_jsxDEV(Box, {\n              as: FaRegCalendarAlt,\n              mr: 2\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 400,\n              columnNumber: 17\n            }, this), \"Historical Travel Data\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 399,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 398,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(VStack, {\n          spacing: 3,\n          align: \"stretch\",\n          children: historicalData.map((data, index) => {\n            var _TrafficLevels$data$t, _TrafficLevels$data$t2;\n            return /*#__PURE__*/_jsxDEV(Box, {\n              p: 3,\n              borderWidth: \"1px\",\n              borderRadius: \"md\",\n              children: /*#__PURE__*/_jsxDEV(HStack, {\n                justify: \"space-between\",\n                children: [/*#__PURE__*/_jsxDEV(Box, {\n                  children: [/*#__PURE__*/_jsxDEV(Text, {\n                    fontWeight: \"bold\",\n                    children: new Date(data.date).toLocaleDateString()\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 410,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(Text, {\n                    fontSize: \"sm\",\n                    children: [\"Duration: \", formatDuration(data.duration / 60), \" \"]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 413,\n                    columnNumber: 23\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 409,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(Box, {\n                  children: [/*#__PURE__*/_jsxDEV(Text, {\n                    fontSize: \"sm\",\n                    children: [\"Traffic:\", \" \", /*#__PURE__*/_jsxDEV(Box, {\n                      as: \"span\",\n                      color: ((_TrafficLevels$data$t = TrafficLevels[data.trafficConditions]) === null || _TrafficLevels$data$t === void 0 ? void 0 : _TrafficLevels$data$t.color) || \"gray.500\",\n                      children: ((_TrafficLevels$data$t2 = TrafficLevels[data.trafficConditions]) === null || _TrafficLevels$data$t2 === void 0 ? void 0 : _TrafficLevels$data$t2.text) || \"Unknown\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 422,\n                      columnNumber: 25\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 420,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(Text, {\n                    fontSize: \"sm\",\n                    children: [\"Weather: \", data.weatherConditions]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 433,\n                    columnNumber: 23\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 419,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(Box, {\n                  children: [/*#__PURE__*/_jsxDEV(Text, {\n                    fontSize: \"sm\",\n                    children: [\"Departure:\", \" \", new Date(data.departureTime).toLocaleTimeString()]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 439,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(Text, {\n                    fontSize: \"sm\",\n                    children: [\"Arrival:\", \" \", new Date(data.arrivalTime).toLocaleTimeString()]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 443,\n                    columnNumber: 23\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 438,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 408,\n                columnNumber: 19\n              }, this)\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 407,\n              columnNumber: 17\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 405,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 397,\n        columnNumber: 11\n      }, this), !prediction && !trafficPrediction && (!historicalData || historicalData.length === 0) && !isLoading && /*#__PURE__*/_jsxDEV(Box, {\n        textAlign: \"center\",\n        py: 8,\n        children: [/*#__PURE__*/_jsxDEV(Text, {\n          color: \"gray.500\",\n          children: \"Select prediction options and click 'Predict' to generate AI-powered travel insights.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 460,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(Text, {\n          color: \"gray.500\",\n          fontSize: \"sm\",\n          mt: 2,\n          children: \"Our ML models analyze traffic patterns, weather conditions, time of day, and other factors to provide accurate predictions.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 465,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 459,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 152,\n    columnNumber: 5\n  }, this);\n};\n_s(Predictions, \"HDinamTcplXDpn1N3RG/zIlJdpY=\", false, function () {\n  return [useToast];\n});\n_c = Predictions;\nexport default Predictions;\nvar _c;\n$RefreshReg$(_c, \"Predictions\");","map":{"version":3,"names":["React","useState","Box","Button","Heading","Flex","VStack","HStack","Select","Text","Stat","StatLabel","StatNumber","StatGroup","StatHelpText","Divider","FormControl","FormLabel","useToast","Progress","FaClock","FaChartLine","FaRegCalendarAlt","predictionsService","jsxDEV","_jsxDEV","Fragment","_Fragment","TrafficLevels","light","color","text","moderate","heavy","Predictions","source","destination","onPredictionComplete","_s","_TrafficLevels$traffi","_TrafficLevels$traffi2","predictionType","setPredictionType","trafficModel","setTrafficModel","departureTime","setDepartureTime","customDate","setCustomDate","Date","toISOString","split","customTime","setCustomTime","isLoading","setIsLoading","prediction","setPrediction","trafficPrediction","setTrafficPrediction","historicalData","setHistoricalData","toast","makePrediction","title","description","status","duration","isClosable","departureTimeValue","dateTimeStr","response","predictTravelTime","data","predictTraffic","getHistoricalData","JSON","stringify","error","console","message","formatDuration","minutes","hours","Math","floor","mins","round","p","children","size","mb","fileName","_jsxFileName","lineNumber","columnNumber","spacing","align","wrap","w","base","md","fontSize","value","onChange","e","target","type","className","style","width","padding","borderRadius","borderWidth","borderColor","alignSelf","pt","colorScheme","leftIcon","onClick","mt","my","py","textAlign","isIndeterminate","bg","shadow","as","mr","travelTimeMinutes","distance","toFixed","confidence","fontWeight","toLocaleString","getTime","congestionLevel","averageSpeed","delayProbability","segments","map","segment","index","_TrafficLevels$segmen","_TrafficLevels$segmen2","_TrafficLevels$segmen3","borderLeftWidth","borderLeftColor","congestion","length","_TrafficLevels$data$t","_TrafficLevels$data$t2","justify","date","toLocaleDateString","trafficConditions","weatherConditions","toLocaleTimeString","arrivalTime","_c","$RefreshReg$"],"sources":["D:/Sarthak/VScode workshop/Projects/DSA project/traveler-guide/frontend/src/components/Predictions.js"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport {\r\n  Box,\r\n  Button,\r\n  Heading,\r\n  Flex,\r\n  VStack,\r\n  HStack,\r\n  Select,\r\n  Text,\r\n  Stat,\r\n  StatLabel,\r\n  StatNumber,\r\n  StatGroup,\r\n  StatHelpText,\r\n  Divider,\r\n  FormControl,\r\n  FormLabel,\r\n  useToast,\r\n  Progress,\r\n} from \"@chakra-ui/react\";\r\nimport { FaClock, FaChartLine, FaRegCalendarAlt } from \"react-icons/fa\";\r\n\r\nimport { predictionsService } from \"../services/api\";\r\n\r\nconst TrafficLevels = {\r\n  light: { color: \"green.400\", text: \"Light Traffic\" },\r\n  moderate: { color: \"yellow.400\", text: \"Moderate Traffic\" },\r\n  heavy: { color: \"red.400\", text: \"Heavy Traffic\" },\r\n};\r\n\r\nconst Predictions = ({ source, destination, onPredictionComplete }) => {\r\n  // State\r\n  const [predictionType, setPredictionType] = useState(\"travel-time\");\r\n  const [trafficModel, setTrafficModel] = useState(\"best_guess\");\r\n  const [departureTime, setDepartureTime] = useState(\"now\");\r\n  const [customDate, setCustomDate] = useState(\r\n    new Date().toISOString().split(\"T\")[0]\r\n  );\r\n  const [customTime, setCustomTime] = useState(\"08:00\");\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [prediction, setPrediction] = useState(null);\r\n  const [trafficPrediction, setTrafficPrediction] = useState(null);\r\n  const [historicalData, setHistoricalData] = useState(null);\r\n\r\n  // Toast for notifications\r\n  const toast = useToast();\r\n\r\n  // Make prediction\r\n  const makePrediction = async () => {\r\n    if (!source || !destination) {\r\n      toast({\r\n        title: \"Missing Information\",\r\n        description:\r\n          \"Please calculate a route first to get source and destination locations\",\r\n        status: \"warning\",\r\n        duration: 3000,\r\n        isClosable: true,\r\n      });\r\n      return;\r\n    }\r\n\r\n    setIsLoading(true);\r\n\r\n    try {\r\n      // Get departure date/time\r\n      let departureTimeValue;\r\n      if (departureTime === \"now\") {\r\n        departureTimeValue = new Date().toISOString();\r\n      } else if (departureTime === \"custom\") {\r\n        const dateTimeStr = `${customDate}T${customTime}:00`;\r\n        departureTimeValue = new Date(dateTimeStr).toISOString();\r\n      }\r\n\r\n      if (predictionType === \"travel-time\") {\r\n        // Predict travel time\r\n        const response = await predictionsService.predictTravelTime(\r\n          source,\r\n          destination,\r\n          departureTimeValue,\r\n          trafficModel\r\n        );\r\n\r\n        setPrediction(response.data.prediction);\r\n        setTrafficPrediction(null);\r\n        setHistoricalData(null);\r\n\r\n        // Notify parent component about the prediction\r\n        if (onPredictionComplete) {\r\n          onPredictionComplete(response.data.prediction);\r\n        }\r\n      } else if (predictionType === \"traffic\") {\r\n        // Predict traffic\r\n        const response = await predictionsService.predictTraffic(\r\n          [source, destination],\r\n          departureTimeValue\r\n        );\r\n\r\n        setTrafficPrediction(response.data.prediction);\r\n        setPrediction(null);\r\n        setHistoricalData(null);\r\n      } else if (predictionType === \"historical\") {\r\n        // Get historical data\r\n        const response = await predictionsService.getHistoricalData(\r\n          JSON.stringify(source),\r\n          JSON.stringify(destination),\r\n          10 // limit to 10 entries\r\n        );\r\n\r\n        setHistoricalData(response.data.data);\r\n        setPrediction(null);\r\n        setTrafficPrediction(null);\r\n      }\r\n\r\n      toast({\r\n        title: \"Prediction Complete\",\r\n        description:\r\n          \"AI model has generated the prediction based on historical data\",\r\n        status: \"success\",\r\n        duration: 3000,\r\n        isClosable: true,\r\n      });\r\n    } catch (error) {\r\n      console.error(\"Error making prediction:\", error);\r\n      toast({\r\n        title: \"Error making prediction\",\r\n        description: error.message,\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n      });\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  // Format duration in human-readable form\r\n  const formatDuration = (minutes) => {\r\n    const hours = Math.floor(minutes / 60);\r\n    const mins = Math.round(minutes % 60);\r\n\r\n    if (hours === 0) {\r\n      return `${mins} minutes`;\r\n    } else if (mins === 0) {\r\n      return `${hours} hour${hours > 1 ? \"s\" : \"\"}`;\r\n    } else {\r\n      return `${hours} hour${hours > 1 ? \"s\" : \"\"} ${mins} min`;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Box p={4}>\r\n      <Heading size=\"lg\" mb={4}>\r\n        Travel Time & Traffic Predictions\r\n      </Heading>\r\n\r\n      <VStack spacing={4} align=\"stretch\">\r\n        <HStack spacing={2} wrap=\"wrap\">\r\n          <FormControl w={{ base: \"100%\", md: \"200px\" }}>\r\n            <FormLabel fontSize=\"sm\">Prediction Type</FormLabel>\r\n            <Select\r\n              value={predictionType}\r\n              onChange={(e) => setPredictionType(e.target.value)}\r\n            >\r\n              <option value=\"travel-time\">Travel Time</option>\r\n              <option value=\"traffic\">Traffic Conditions</option>\r\n              <option value=\"historical\">Historical Data</option>\r\n            </Select>\r\n          </FormControl>\r\n\r\n          {predictionType === \"travel-time\" && (\r\n            <FormControl w={{ base: \"100%\", md: \"200px\" }}>\r\n              <FormLabel fontSize=\"sm\">Traffic Model</FormLabel>\r\n              <Select\r\n                value={trafficModel}\r\n                onChange={(e) => setTrafficModel(e.target.value)}\r\n              >\r\n                <option value=\"best_guess\">Best Guess</option>\r\n                <option value=\"optimistic\">Optimistic</option>\r\n                <option value=\"pessimistic\">Pessimistic</option>\r\n              </Select>\r\n            </FormControl>\r\n          )}\r\n\r\n          <FormControl w={{ base: \"100%\", md: \"200px\" }}>\r\n            <FormLabel fontSize=\"sm\">Departure Time</FormLabel>\r\n            <Select\r\n              value={departureTime}\r\n              onChange={(e) => setDepartureTime(e.target.value)}\r\n            >\r\n              <option value=\"now\">Now</option>\r\n              <option value=\"custom\">Custom Date/Time</option>\r\n            </Select>\r\n          </FormControl>\r\n\r\n          {departureTime === \"custom\" && (\r\n            <>\r\n              <FormControl w={{ base: \"100%\", md: \"200px\" }}>\r\n                <FormLabel fontSize=\"sm\">Date</FormLabel>\r\n                <input\r\n                  type=\"date\"\r\n                  value={customDate}\r\n                  onChange={(e) => setCustomDate(e.target.value)}\r\n                  className=\"chakra-input\"\r\n                  style={{\r\n                    width: \"100%\",\r\n                    padding: \"0.5rem\",\r\n                    borderRadius: \"0.375rem\",\r\n                    borderWidth: \"1px\",\r\n                    borderColor: \"inherit\",\r\n                  }}\r\n                />\r\n              </FormControl>\r\n\r\n              <FormControl w={{ base: \"100%\", md: \"150px\" }}>\r\n                <FormLabel fontSize=\"sm\">Time</FormLabel>\r\n                <input\r\n                  type=\"time\"\r\n                  value={customTime}\r\n                  onChange={(e) => setCustomTime(e.target.value)}\r\n                  className=\"chakra-input\"\r\n                  style={{\r\n                    width: \"100%\",\r\n                    padding: \"0.5rem\",\r\n                    borderRadius: \"0.375rem\",\r\n                    borderWidth: \"1px\",\r\n                    borderColor: \"inherit\",\r\n                  }}\r\n                />\r\n              </FormControl>\r\n            </>\r\n          )}\r\n\r\n          <Box\r\n            alignSelf={{ base: \"flex-start\", md: \"flex-end\" }}\r\n            pt={{ base: 0, md: 2 }}\r\n            w={{ base: \"100%\", md: \"auto\" }}\r\n          >\r\n            <Button\r\n              colorScheme=\"purple\"\r\n              leftIcon={<FaChartLine />}\r\n              onClick={makePrediction}\r\n              isLoading={isLoading}\r\n              w={{ base: \"100%\", md: \"auto\" }}\r\n              mt={{ base: 2, md: 0 }}\r\n            >\r\n              Predict\r\n            </Button>\r\n          </Box>\r\n        </HStack>\r\n\r\n        <Divider my={4} />\r\n\r\n        {isLoading && (\r\n          <Box py={8}>\r\n            <Text mb={2} textAlign=\"center\">\r\n              Processing your prediction...\r\n            </Text>\r\n            <Progress size=\"sm\" isIndeterminate colorScheme=\"purple\" />\r\n          </Box>\r\n        )}\r\n\r\n        {/* Travel Time Prediction Results */}\r\n        {prediction && (\r\n          <Box p={5} borderWidth=\"1px\" borderRadius=\"lg\" bg=\"white\" shadow=\"md\">\r\n            <Heading size=\"md\" mb={4} color=\"purple.600\">\r\n              <Flex align=\"center\">\r\n                <Box as={FaClock} mr={2} />\r\n                Travel Time Prediction\r\n              </Flex>\r\n            </Heading>\r\n\r\n            <StatGroup>\r\n              <Stat>\r\n                <StatLabel>Predicted Travel Time</StatLabel>\r\n                <StatNumber>\r\n                  {formatDuration(prediction.travelTimeMinutes)}\r\n                </StatNumber>\r\n                <StatHelpText>\r\n                  {trafficModel === \"best_guess\"\r\n                    ? \"Average estimate\"\r\n                    : trafficModel === \"optimistic\"\r\n                    ? \"Best case scenario\"\r\n                    : \"Worst case scenario\"}\r\n                </StatHelpText>\r\n              </Stat>\r\n\r\n              <Stat>\r\n                <StatLabel>Distance</StatLabel>\r\n                <StatNumber>\r\n                  {(prediction.distance / 1000).toFixed(1)} km\r\n                </StatNumber>\r\n                <StatHelpText>Total journey distance</StatHelpText>\r\n              </Stat>\r\n\r\n              <Stat>\r\n                <StatLabel>Confidence</StatLabel>\r\n                <StatNumber>\r\n                  {(prediction.confidence * 100).toFixed(0)}%\r\n                </StatNumber>\r\n                <StatHelpText>ML model confidence</StatHelpText>\r\n              </Stat>\r\n            </StatGroup>\r\n\r\n            <Box mt={4}>\r\n              <Text fontWeight=\"bold\">Departure: </Text>\r\n              <Text>{new Date(prediction.departureTime).toLocaleString()}</Text>\r\n\r\n              <Text fontWeight=\"bold\" mt={2}>\r\n                Estimated Arrival:{\" \"}\r\n              </Text>\r\n              <Text>\r\n                {new Date(\r\n                  new Date(prediction.departureTime).getTime() +\r\n                    prediction.travelTimeMinutes * 60 * 1000\r\n                ).toLocaleString()}\r\n              </Text>\r\n            </Box>\r\n          </Box>\r\n        )}\r\n\r\n        {/* Traffic Prediction Results */}\r\n        {trafficPrediction && (\r\n          <Box p={5} borderWidth=\"1px\" borderRadius=\"lg\" bg=\"white\" shadow=\"md\">\r\n            <Heading size=\"md\" mb={4} color=\"blue.600\">\r\n              <Flex align=\"center\">\r\n                <Box as={FaChartLine} mr={2} />\r\n                Traffic Prediction\r\n              </Flex>\r\n            </Heading>\r\n\r\n            <StatGroup>\r\n              <Stat>\r\n                <StatLabel>Congestion Level</StatLabel>\r\n                <StatNumber\r\n                  color={\r\n                    TrafficLevels[trafficPrediction.congestionLevel]?.color ||\r\n                    \"gray.500\"\r\n                  }\r\n                >\r\n                  {TrafficLevels[trafficPrediction.congestionLevel]?.text ||\r\n                    \"Unknown\"}\r\n                </StatNumber>\r\n                <StatHelpText>Overall traffic level</StatHelpText>\r\n              </Stat>\r\n\r\n              <Stat>\r\n                <StatLabel>Average Speed</StatLabel>\r\n                <StatNumber>{trafficPrediction.averageSpeed} km/h</StatNumber>\r\n                <StatHelpText>Expected average speed</StatHelpText>\r\n              </Stat>\r\n\r\n              <Stat>\r\n                <StatLabel>Delay Probability</StatLabel>\r\n                <StatNumber>\r\n                  {(trafficPrediction.delayProbability * 100).toFixed(0)}%\r\n                </StatNumber>\r\n                <StatHelpText>Chance of significant delays</StatHelpText>\r\n              </Stat>\r\n            </StatGroup>\r\n\r\n            <Heading size=\"sm\" mt={4} mb={2}>\r\n              Route Segments\r\n            </Heading>\r\n\r\n            {trafficPrediction.segments.map((segment, index) => (\r\n              <Box\r\n                key={index}\r\n                p={3}\r\n                mb={2}\r\n                borderWidth=\"1px\"\r\n                borderRadius=\"md\"\r\n                borderLeftWidth=\"4px\"\r\n                borderLeftColor={\r\n                  TrafficLevels[segment.congestion]?.color || \"gray.200\"\r\n                }\r\n              >\r\n                <Text fontWeight=\"bold\">Segment {index + 1}</Text>\r\n                <Text fontSize=\"sm\">\r\n                  Traffic:{\" \"}\r\n                  <Box\r\n                    as=\"span\"\r\n                    color={\r\n                      TrafficLevels[segment.congestion]?.color || \"gray.500\"\r\n                    }\r\n                  >\r\n                    {TrafficLevels[segment.congestion]?.text || \"Unknown\"}\r\n                  </Box>\r\n                </Text>\r\n              </Box>\r\n            ))}\r\n          </Box>\r\n        )}\r\n\r\n        {/* Historical Data Results */}\r\n        {historicalData && historicalData.length > 0 && (\r\n          <Box p={5} borderWidth=\"1px\" borderRadius=\"lg\" bg=\"white\" shadow=\"md\">\r\n            <Heading size=\"md\" mb={4} color=\"teal.600\">\r\n              <Flex align=\"center\">\r\n                <Box as={FaRegCalendarAlt} mr={2} />\r\n                Historical Travel Data\r\n              </Flex>\r\n            </Heading>\r\n\r\n            <VStack spacing={3} align=\"stretch\">\r\n              {historicalData.map((data, index) => (\r\n                <Box key={index} p={3} borderWidth=\"1px\" borderRadius=\"md\">\r\n                  <HStack justify=\"space-between\">\r\n                    <Box>\r\n                      <Text fontWeight=\"bold\">\r\n                        {new Date(data.date).toLocaleDateString()}\r\n                      </Text>\r\n                      <Text fontSize=\"sm\">\r\n                        Duration: {formatDuration(data.duration / 60)}{\" \"}\r\n                        {/* Convert seconds to minutes */}\r\n                      </Text>\r\n                    </Box>\r\n\r\n                    <Box>\r\n                      <Text fontSize=\"sm\">\r\n                        Traffic:{\" \"}\r\n                        <Box\r\n                          as=\"span\"\r\n                          color={\r\n                            TrafficLevels[data.trafficConditions]?.color ||\r\n                            \"gray.500\"\r\n                          }\r\n                        >\r\n                          {TrafficLevels[data.trafficConditions]?.text ||\r\n                            \"Unknown\"}\r\n                        </Box>\r\n                      </Text>\r\n                      <Text fontSize=\"sm\">\r\n                        Weather: {data.weatherConditions}\r\n                      </Text>\r\n                    </Box>\r\n\r\n                    <Box>\r\n                      <Text fontSize=\"sm\">\r\n                        Departure:{\" \"}\r\n                        {new Date(data.departureTime).toLocaleTimeString()}\r\n                      </Text>\r\n                      <Text fontSize=\"sm\">\r\n                        Arrival:{\" \"}\r\n                        {new Date(data.arrivalTime).toLocaleTimeString()}\r\n                      </Text>\r\n                    </Box>\r\n                  </HStack>\r\n                </Box>\r\n              ))}\r\n            </VStack>\r\n          </Box>\r\n        )}\r\n\r\n        {!prediction &&\r\n          !trafficPrediction &&\r\n          (!historicalData || historicalData.length === 0) &&\r\n          !isLoading && (\r\n            <Box textAlign=\"center\" py={8}>\r\n              <Text color=\"gray.500\">\r\n                Select prediction options and click 'Predict' to generate\r\n                AI-powered travel insights.\r\n              </Text>\r\n\r\n              <Text color=\"gray.500\" fontSize=\"sm\" mt={2}>\r\n                Our ML models analyze traffic patterns, weather conditions, time\r\n                of day, and other factors to provide accurate predictions.\r\n              </Text>\r\n            </Box>\r\n          )}\r\n      </VStack>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default Predictions;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}