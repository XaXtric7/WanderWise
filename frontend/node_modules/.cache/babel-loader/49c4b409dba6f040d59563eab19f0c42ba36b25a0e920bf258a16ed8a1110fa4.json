{"ast":null,"code":"import axios from \"axios\";\nconst API_URL = \"http://localhost:5000/api\";\n\n// Create axios instance with base URL\nconst apiClient = axios.create({\n  baseURL: API_URL,\n  headers: {\n    \"Content-Type\": \"application/json\"\n  }\n});\n\n// Routes API service\nexport const routesService = {\n  // Calculate optimal route\n  calculateRoute: (source, destination, algorithm = \"a-star\") => {\n    return apiClient.post(\"/routes/calculate\", {\n      source,\n      destination,\n      algorithm\n    });\n  },\n  // Calculate route with preferences\n  calculateRouteWithPreferences: (source, destination, preferences) => {\n    return apiClient.post(\"/routes/preferences\", {\n      source,\n      destination,\n      preferences\n    });\n  },\n  // Get offline route data\n  getOfflineRoute: routeId => {\n    return apiClient.get(`/routes/offline/${routeId}`);\n  },\n  // Save route for offline access\n  saveRouteForOffline: routeData => {\n    return apiClient.post(\"/routes/save\", routeData);\n  }\n};\n\n// Predictions API service\nexport const predictionsService = {\n  // Predict travel time\n  predictTravelTime: (source, destination, departureTime, trafficModel = \"best_guess\") => {\n    return apiClient.post(\"/predictions/travel-time\", {\n      source,\n      destination,\n      departureTime,\n      traffic: trafficModel\n    });\n  },\n  // Predict traffic conditions\n  predictTraffic: (route, time) => {\n    return apiClient.post(\"/predictions/traffic\", {\n      route,\n      time\n    });\n  },\n  // Get historical travel data\n  getHistoricalData: (source, destination, limit = 10) => {\n    return apiClient.get(\"/predictions/historical-data\", {\n      params: {\n        source,\n        destination,\n        limit\n      }\n    });\n  }\n};\n\n// Simple placeholder service for future implementation\nexport const placesService = {\n  getNearbyPlaces: (location, type, radius) => {\n    return Promise.resolve({\n      data: {\n        places: []\n      }\n    });\n  }\n};\nexport default {\n  routesService,\n  placesService,\n  predictionsService\n};","map":{"version":3,"names":["axios","API_URL","apiClient","create","baseURL","headers","routesService","calculateRoute","source","destination","algorithm","post","calculateRouteWithPreferences","preferences","getOfflineRoute","routeId","get","saveRouteForOffline","routeData","predictionsService","predictTravelTime","departureTime","trafficModel","traffic","predictTraffic","route","time","getHistoricalData","limit","params","placesService","getNearbyPlaces","location","type","radius","Promise","resolve","data","places"],"sources":["D:/Sarthak/VScode workshop/Projects/DSA project/traveler-guide/frontend/src/services/api.js"],"sourcesContent":["import axios from \"axios\";\r\n\r\nconst API_URL = \"http://localhost:5000/api\";\r\n\r\n// Create axios instance with base URL\r\nconst apiClient = axios.create({\r\n  baseURL: API_URL,\r\n  headers: {\r\n    \"Content-Type\": \"application/json\",\r\n  },\r\n});\r\n\r\n// Routes API service\r\nexport const routesService = {\r\n  // Calculate optimal route\r\n  calculateRoute: (source, destination, algorithm = \"a-star\") => {\r\n    return apiClient.post(\"/routes/calculate\", {\r\n      source,\r\n      destination,\r\n      algorithm,\r\n    });\r\n  },\r\n\r\n  // Calculate route with preferences\r\n  calculateRouteWithPreferences: (source, destination, preferences) => {\r\n    return apiClient.post(\"/routes/preferences\", {\r\n      source,\r\n      destination,\r\n      preferences,\r\n    });\r\n  },\r\n\r\n  // Get offline route data\r\n  getOfflineRoute: (routeId) => {\r\n    return apiClient.get(`/routes/offline/${routeId}`);\r\n  },\r\n\r\n  // Save route for offline access\r\n  saveRouteForOffline: (routeData) => {\r\n    return apiClient.post(\"/routes/save\", routeData);\r\n  },\r\n};\r\n\r\n// Predictions API service\r\nexport const predictionsService = {\r\n  // Predict travel time\r\n  predictTravelTime: (\r\n    source,\r\n    destination,\r\n    departureTime,\r\n    trafficModel = \"best_guess\"\r\n  ) => {\r\n    return apiClient.post(\"/predictions/travel-time\", {\r\n      source,\r\n      destination,\r\n      departureTime,\r\n      traffic: trafficModel,\r\n    });\r\n  },\r\n\r\n  // Predict traffic conditions\r\n  predictTraffic: (route, time) => {\r\n    return apiClient.post(\"/predictions/traffic\", {\r\n      route,\r\n      time,\r\n    });\r\n  },\r\n\r\n  // Get historical travel data\r\n  getHistoricalData: (source, destination, limit = 10) => {\r\n    return apiClient.get(\"/predictions/historical-data\", {\r\n      params: { source, destination, limit },\r\n    });\r\n  },\r\n};\r\n\r\n// Simple placeholder service for future implementation\r\nexport const placesService = {\r\n  getNearbyPlaces: (location, type, radius) => {\r\n    return Promise.resolve({\r\n      data: {\r\n        places: [],\r\n      },\r\n    });\r\n  },\r\n};\r\n\r\nexport default { routesService, placesService, predictionsService };\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,OAAO,GAAG,2BAA2B;;AAE3C;AACA,MAAMC,SAAS,GAAGF,KAAK,CAACG,MAAM,CAAC;EAC7BC,OAAO,EAAEH,OAAO;EAChBI,OAAO,EAAE;IACP,cAAc,EAAE;EAClB;AACF,CAAC,CAAC;;AAEF;AACA,OAAO,MAAMC,aAAa,GAAG;EAC3B;EACAC,cAAc,EAAEA,CAACC,MAAM,EAAEC,WAAW,EAAEC,SAAS,GAAG,QAAQ,KAAK;IAC7D,OAAOR,SAAS,CAACS,IAAI,CAAC,mBAAmB,EAAE;MACzCH,MAAM;MACNC,WAAW;MACXC;IACF,CAAC,CAAC;EACJ,CAAC;EAED;EACAE,6BAA6B,EAAEA,CAACJ,MAAM,EAAEC,WAAW,EAAEI,WAAW,KAAK;IACnE,OAAOX,SAAS,CAACS,IAAI,CAAC,qBAAqB,EAAE;MAC3CH,MAAM;MACNC,WAAW;MACXI;IACF,CAAC,CAAC;EACJ,CAAC;EAED;EACAC,eAAe,EAAGC,OAAO,IAAK;IAC5B,OAAOb,SAAS,CAACc,GAAG,CAAC,mBAAmBD,OAAO,EAAE,CAAC;EACpD,CAAC;EAED;EACAE,mBAAmB,EAAGC,SAAS,IAAK;IAClC,OAAOhB,SAAS,CAACS,IAAI,CAAC,cAAc,EAAEO,SAAS,CAAC;EAClD;AACF,CAAC;;AAED;AACA,OAAO,MAAMC,kBAAkB,GAAG;EAChC;EACAC,iBAAiB,EAAEA,CACjBZ,MAAM,EACNC,WAAW,EACXY,aAAa,EACbC,YAAY,GAAG,YAAY,KACxB;IACH,OAAOpB,SAAS,CAACS,IAAI,CAAC,0BAA0B,EAAE;MAChDH,MAAM;MACNC,WAAW;MACXY,aAAa;MACbE,OAAO,EAAED;IACX,CAAC,CAAC;EACJ,CAAC;EAED;EACAE,cAAc,EAAEA,CAACC,KAAK,EAAEC,IAAI,KAAK;IAC/B,OAAOxB,SAAS,CAACS,IAAI,CAAC,sBAAsB,EAAE;MAC5Cc,KAAK;MACLC;IACF,CAAC,CAAC;EACJ,CAAC;EAED;EACAC,iBAAiB,EAAEA,CAACnB,MAAM,EAAEC,WAAW,EAAEmB,KAAK,GAAG,EAAE,KAAK;IACtD,OAAO1B,SAAS,CAACc,GAAG,CAAC,8BAA8B,EAAE;MACnDa,MAAM,EAAE;QAAErB,MAAM;QAAEC,WAAW;QAAEmB;MAAM;IACvC,CAAC,CAAC;EACJ;AACF,CAAC;;AAED;AACA,OAAO,MAAME,aAAa,GAAG;EAC3BC,eAAe,EAAEA,CAACC,QAAQ,EAAEC,IAAI,EAAEC,MAAM,KAAK;IAC3C,OAAOC,OAAO,CAACC,OAAO,CAAC;MACrBC,IAAI,EAAE;QACJC,MAAM,EAAE;MACV;IACF,CAAC,CAAC;EACJ;AACF,CAAC;AAED,eAAe;EAAEhC,aAAa;EAAEwB,aAAa;EAAEX;AAAmB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}