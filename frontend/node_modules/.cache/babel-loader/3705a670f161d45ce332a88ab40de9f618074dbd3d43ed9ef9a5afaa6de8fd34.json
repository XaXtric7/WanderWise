{"ast":null,"code":"import axios from \"axios\";\nconst API_URL = process.env.REACT_APP_API_URL || \"http://localhost:5000/api\";\n\n// Create axios instance with base URL\nconst apiClient = axios.create({\n  baseURL: API_URL,\n  headers: {\n    \"Content-Type\": \"application/json\"\n  }\n});\n\n// Routes API service\nexport const routesService = {\n  // Calculate optimal route\n  calculateRoute: (source, destination, algorithm = \"a-star\") => {\n    return apiClient.post(\"/routes/calculate\", {\n      source,\n      destination,\n      algorithm\n    });\n  },\n  // Calculate route with preferences\n  calculateRouteWithPreferences: (source, destination, preferences) => {\n    return apiClient.post(\"/routes/preferences\", {\n      source,\n      destination,\n      preferences\n    });\n  },\n  // Get offline route data\n  getOfflineRoute: routeId => {\n    return apiClient.get(`/routes/offline/${routeId}`);\n  },\n  // Save route for offline access\n  saveRouteForOffline: routeData => {\n    return apiClient.post(\"/routes/save\", routeData);\n  }\n};\n\n// Recommendations API service\nexport const recommendationsService = {\n  // Get recommendations based on category\n  getRecommendations: (location, category, radius, route) => {\n    // Map the categories to API endpoints\n    const categoryEndpoints = {\n      hotels: \"hotels\",\n      restaurants: \"restaurants\",\n      gasStations: \"gas-stations\",\n      shops: \"places\"\n    };\n    const endpoint = categoryEndpoints[category] || \"places\";\n\n    // Different parameters based on category\n    let params = {\n      lat: location.lat,\n      lng: location.lng,\n      radius: radius * 1000 // Convert km to meters\n    };\n\n    // For gas stations along a route\n    if (category === \"gasStations\" && route) {\n      params = {\n        route: JSON.stringify(route),\n        maxDetour: 2000 // 2km max detour\n      };\n    }\n\n    // For general places (shops, etc)\n    if (category === \"shops\") {\n      params.type = \"store\";\n    }\n    return apiClient.get(`/recommendations/${endpoint}`, {\n      params\n    });\n  },\n  // Get place recommendations\n  getPlaceRecommendations: (lat, lng, radius, type) => {\n    return apiClient.get(\"/recommendations/places\", {\n      params: {\n        lat,\n        lng,\n        radius,\n        type\n      }\n    });\n  },\n  // Get hotel recommendations\n  getHotelRecommendations: (lat, lng, radius, priceLevel) => {\n    return apiClient.get(\"/recommendations/hotels\", {\n      params: {\n        lat,\n        lng,\n        radius,\n        priceLevel\n      }\n    });\n  },\n  // Get restaurant recommendations\n  getRestaurantRecommendations: (lat, lng, radius, cuisine) => {\n    return apiClient.get(\"/recommendations/restaurants\", {\n      params: {\n        lat,\n        lng,\n        radius,\n        cuisine\n      }\n    });\n  },\n  // Get gas station recommendations\n  getGasStationRecommendations: (route, maxDetour) => {\n    return apiClient.get(\"/recommendations/gas-stations\", {\n      params: {\n        route: JSON.stringify(route),\n        maxDetour\n      }\n    });\n  }\n};\n\n// Predictions API service\nexport const predictionsService = {\n  // Predict travel time\n  predictTravelTime: (source, destination, departureTime, traffic) => {\n    return apiClient.post(\"/predictions/travel-time\", {\n      source,\n      destination,\n      departureTime,\n      traffic\n    });\n  },\n  // Predict traffic conditions\n  predictTraffic: (route, time) => {\n    return apiClient.post(\"/predictions/traffic\", {\n      route,\n      time\n    });\n  },\n  // Get historical travel data\n  getHistoricalData: (source, destination, limit) => {\n    return apiClient.get(\"/predictions/historical-data\", {\n      params: {\n        source,\n        destination,\n        limit\n      }\n    });\n  }\n};\nexport default {\n  routesService,\n  recommendationsService,\n  predictionsService\n};","map":{"version":3,"names":["axios","API_URL","process","env","REACT_APP_API_URL","apiClient","create","baseURL","headers","routesService","calculateRoute","source","destination","algorithm","post","calculateRouteWithPreferences","preferences","getOfflineRoute","routeId","get","saveRouteForOffline","routeData","recommendationsService","getRecommendations","location","category","radius","route","categoryEndpoints","hotels","restaurants","gasStations","shops","endpoint","params","lat","lng","JSON","stringify","maxDetour","type","getPlaceRecommendations","getHotelRecommendations","priceLevel","getRestaurantRecommendations","cuisine","getGasStationRecommendations","predictionsService","predictTravelTime","departureTime","traffic","predictTraffic","time","getHistoricalData","limit"],"sources":["D:/Sarthak/VScode workshop/Projects/DSA project/traveler-guide/frontend/src/services/api.js"],"sourcesContent":["import axios from \"axios\";\r\n\r\nconst API_URL = process.env.REACT_APP_API_URL || \"http://localhost:5000/api\";\r\n\r\n// Create axios instance with base URL\r\nconst apiClient = axios.create({\r\n  baseURL: API_URL,\r\n  headers: {\r\n    \"Content-Type\": \"application/json\",\r\n  },\r\n});\r\n\r\n// Routes API service\r\nexport const routesService = {\r\n  // Calculate optimal route\r\n  calculateRoute: (source, destination, algorithm = \"a-star\") => {\r\n    return apiClient.post(\"/routes/calculate\", {\r\n      source,\r\n      destination,\r\n      algorithm,\r\n    });\r\n  },\r\n\r\n  // Calculate route with preferences\r\n  calculateRouteWithPreferences: (source, destination, preferences) => {\r\n    return apiClient.post(\"/routes/preferences\", {\r\n      source,\r\n      destination,\r\n      preferences,\r\n    });\r\n  },\r\n\r\n  // Get offline route data\r\n  getOfflineRoute: (routeId) => {\r\n    return apiClient.get(`/routes/offline/${routeId}`);\r\n  },\r\n\r\n  // Save route for offline access\r\n  saveRouteForOffline: (routeData) => {\r\n    return apiClient.post(\"/routes/save\", routeData);\r\n  },\r\n};\r\n\r\n// Recommendations API service\r\nexport const recommendationsService = {\r\n  // Get recommendations based on category\r\n  getRecommendations: (location, category, radius, route) => {\r\n    // Map the categories to API endpoints\r\n    const categoryEndpoints = {\r\n      hotels: \"hotels\",\r\n      restaurants: \"restaurants\",\r\n      gasStations: \"gas-stations\",\r\n      shops: \"places\",\r\n    };\r\n\r\n    const endpoint = categoryEndpoints[category] || \"places\";\r\n\r\n    // Different parameters based on category\r\n    let params = {\r\n      lat: location.lat,\r\n      lng: location.lng,\r\n      radius: radius * 1000, // Convert km to meters\r\n    };\r\n\r\n    // For gas stations along a route\r\n    if (category === \"gasStations\" && route) {\r\n      params = {\r\n        route: JSON.stringify(route),\r\n        maxDetour: 2000, // 2km max detour\r\n      };\r\n    }\r\n\r\n    // For general places (shops, etc)\r\n    if (category === \"shops\") {\r\n      params.type = \"store\";\r\n    }\r\n\r\n    return apiClient.get(`/recommendations/${endpoint}`, { params });\r\n  },\r\n\r\n  // Get place recommendations\r\n  getPlaceRecommendations: (lat, lng, radius, type) => {\r\n    return apiClient.get(\"/recommendations/places\", {\r\n      params: { lat, lng, radius, type },\r\n    });\r\n  },\r\n\r\n  // Get hotel recommendations\r\n  getHotelRecommendations: (lat, lng, radius, priceLevel) => {\r\n    return apiClient.get(\"/recommendations/hotels\", {\r\n      params: { lat, lng, radius, priceLevel },\r\n    });\r\n  },\r\n\r\n  // Get restaurant recommendations\r\n  getRestaurantRecommendations: (lat, lng, radius, cuisine) => {\r\n    return apiClient.get(\"/recommendations/restaurants\", {\r\n      params: { lat, lng, radius, cuisine },\r\n    });\r\n  },\r\n\r\n  // Get gas station recommendations\r\n  getGasStationRecommendations: (route, maxDetour) => {\r\n    return apiClient.get(\"/recommendations/gas-stations\", {\r\n      params: { route: JSON.stringify(route), maxDetour },\r\n    });\r\n  },\r\n};\r\n\r\n// Predictions API service\r\nexport const predictionsService = {\r\n  // Predict travel time\r\n  predictTravelTime: (source, destination, departureTime, traffic) => {\r\n    return apiClient.post(\"/predictions/travel-time\", {\r\n      source,\r\n      destination,\r\n      departureTime,\r\n      traffic,\r\n    });\r\n  },\r\n\r\n  // Predict traffic conditions\r\n  predictTraffic: (route, time) => {\r\n    return apiClient.post(\"/predictions/traffic\", { route, time });\r\n  },\r\n\r\n  // Get historical travel data\r\n  getHistoricalData: (source, destination, limit) => {\r\n    return apiClient.get(\"/predictions/historical-data\", {\r\n      params: { source, destination, limit },\r\n    });\r\n  },\r\n};\r\n\r\nexport default { routesService, recommendationsService, predictionsService };\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}